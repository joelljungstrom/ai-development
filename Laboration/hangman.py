'''
Skapa en version av det klassiska spelet Hangman.
- Datorn väljer ett slumpmässigt ord från en fördefinierad lista av ord.
- Spelet visar hur många bokstäver ordet består av, men inte vilka bokstäver som är rätt.
- Spelaren ska gissa en bokstav i taget, och datorn ger feedback om bokstaven finns i ordet eller inte.
- Spelet fortsätter tills spelaren har gissat hela ordet eller har gjort tillräckligt många felaktiga gissningar.
'''

import requests
import re
import random

class HangmanGame:
    def __init__(self):
        self.word_list = {
            "1": ["apple", "banana", "cherry", "date", "elderberry", "fig", "grape", "melon", "kiwi", "lemon", "mango", "nectarine", "orange", "papaya", "quince", "raspberry", "strawberry", "tangerine", "watermelon"],
            "2": ["saab", "toyota", "ford", "honda", "chevrolet", "bmw", "mercedes", "audi", "volkswagen", "nissan", "kia", "hyundai", "porsche", "mazda", "subaru", "jaguar", "land rover", "fiat", "lexus", "volvo"],
            "3": ["sweden", "norway", "finland", "denmark", "iceland", "germany", "france", "italy", "spain", "portugal", "canada", "thailand", "brazil", "argentina", "australia", "india", "china", "japan", "greece", "mexico"],
            "4": ["gin", "vodka", "beer", "wine", "amarula", "tequila", "snaps", "champagne", "cava", "prosecco"],
            "5": []
        }
        self.random_word = ""
        self.guessed_letters = []
        self.guesses_remaining = 10 # initialize 10 original attempts

    def generate_word(self, choice):
        if choice in self.word_list:
            if choice == "5":
                try:
                    random_word_response = requests.get("https://random-word-api.herokuapp.com/word")
                    self.random_word = random_word_response.json()[0]
                except:
                    self.random_word = random.choice(["aberration", "cacophony", "ephemeral", "incontrovertible", "lugubrious", "nefarious", "obfuscate", "recalcitrant", "sycophant", "vitriolic"]) #backup if api doesn't work
            else:
                self.random_word = random.choice(self.word_list[choice])
        else:
            print("Invalid input, try again.")
            return None

    def is_valid_guess(self, guess):
        return re.match("^[a-zA-Z]$", guess) is not None

    def make_guess(self):
        guess = input("Guess a letter: ").strip()
        if self.is_valid_guess(guess):
            if guess in self.guessed_letters:
                print("You've already guessed that letter.")
                return None
            self.guessed_letters.append(guess)
            return guess
        else:
            print("Invalid guess. Please enter a single alphabetical letter.")
            return None

    def display_state(self):
        #displayed_word = ''.join(letter if letter in self.guessed_letters else '_' for letter in self.random_word)
        #print(f"Current word: {displayed_word}")
        print(f"You have {self.guesses_remaining} guesses remaining.")
        print(f"Guessed letters: {', '.join(self.guessed_letters)}")
        print("___________________________________________________________________________")

    def check_win(self):
        return all(letter in self.guessed_letters for letter in self.random_word)

    def hangman_introduction(self):
        print(f"\n--- Welcome to Hangman! --- \nYour task is to guess a word generated by the computer.\nFor each attempt you can guess a letter, and the computer will tell you whether the letter exist in the word or not. You have 10 attempts.\n\nSelect one of the following categories to play:\n")
        print(f"1. Fruits")
        print(f"2. Car brands")
        print(f"3. Countries")
        print(f"4. Alcoholic spirits")
        print(f"5. F**ck it, let's make this as difficult as possible.")

        while True:
            choice = input("Choose a category (1-5): ")
            if choice in ("1", "2", "3", "4", "5"):
                break 
            else:
                print("Please enter a valid category (1-5).")
        
        return choice

    def play(self):
        choice = self.hangman_introduction()
        self.generate_word(choice)

        if not self.random_word:
            return  

        print(f"Great! As a first clue, the length of the word I'm thinking about is... {len(self.random_word)} letters. What's your first guess?")

        while self.guesses_remaining > 0:
            self.display_state()
            guess = self.make_guess()
            if guess is None:
                continue

            if guess not in self.random_word:
                self.guesses_remaining -= 1  #decrease guesses remaining
                print(f"WRONG! '{guess}' is not in the word.")
            else:
                print(f"Correct guess! The letter '{guess}' is in the word.")

            if self.check_win():
                print(f"\nCongratulations... You've beaten the machine. The correct word was '{self.random_word}'.\n")
                break
        else:
            print(f"\nHow does it feel to loose against a machine? The word I was thinking about was '{self.random_word}'. Better luck next time.\n.")

game = HangmanGame()
game.play()